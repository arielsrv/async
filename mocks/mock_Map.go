// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package async

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockMap creates a new instance of MockMap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMap[K comparable, V any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMap[K, V] {
	mock := &MockMap[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMap is an autogenerated mock type for the Map type
type MockMap[K comparable, V any] struct {
	mock.Mock
}

type MockMap_Expecter[K comparable, V any] struct {
	mock *mock.Mock
}

func (_m *MockMap[K, V]) EXPECT() *MockMap_Expecter[K, V] {
	return &MockMap_Expecter[K, V]{mock: &_m.Mock}
}

// Clear provides a mock function for the type MockMap
func (_mock *MockMap[K, V]) Clear() {
	_mock.Called()
	return
}

// MockMap_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockMap_Clear_Call[K comparable, V any] struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockMap_Expecter[K, V]) Clear() *MockMap_Clear_Call[K, V] {
	return &MockMap_Clear_Call[K, V]{Call: _e.mock.On("Clear")}
}

func (_c *MockMap_Clear_Call[K, V]) Run(run func()) *MockMap_Clear_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMap_Clear_Call[K, V]) Return() *MockMap_Clear_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockMap_Clear_Call[K, V]) RunAndReturn(run func()) *MockMap_Clear_Call[K, V] {
	_c.Run(run)
	return _c
}

// ComputeIfAbsent provides a mock function for the type MockMap
func (_mock *MockMap[K, V]) ComputeIfAbsent(key K, mappingFunction func(K) *V) *V {
	ret := _mock.Called(key, mappingFunction)

	if len(ret) == 0 {
		panic("no return value specified for ComputeIfAbsent")
	}

	var r0 *V
	if returnFunc, ok := ret.Get(0).(func(K, func(K) *V) *V); ok {
		r0 = returnFunc(key, mappingFunction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*V)
		}
	}
	return r0
}

// MockMap_ComputeIfAbsent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComputeIfAbsent'
type MockMap_ComputeIfAbsent_Call[K comparable, V any] struct {
	*mock.Call
}

// ComputeIfAbsent is a helper method to define mock.On call
//   - key K
//   - mappingFunction func(K) *V
func (_e *MockMap_Expecter[K, V]) ComputeIfAbsent(key interface{}, mappingFunction interface{}) *MockMap_ComputeIfAbsent_Call[K, V] {
	return &MockMap_ComputeIfAbsent_Call[K, V]{Call: _e.mock.On("ComputeIfAbsent", key, mappingFunction)}
}

func (_c *MockMap_ComputeIfAbsent_Call[K, V]) Run(run func(key K, mappingFunction func(K) *V)) *MockMap_ComputeIfAbsent_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		var arg1 func(K) *V
		if args[1] != nil {
			arg1 = args[1].(func(K) *V)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMap_ComputeIfAbsent_Call[K, V]) Return(v *V) *MockMap_ComputeIfAbsent_Call[K, V] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockMap_ComputeIfAbsent_Call[K, V]) RunAndReturn(run func(key K, mappingFunction func(K) *V) *V) *MockMap_ComputeIfAbsent_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// ContainsKey provides a mock function for the type MockMap
func (_mock *MockMap[K, V]) ContainsKey(key K) bool {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for ContainsKey")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(K) bool); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockMap_ContainsKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainsKey'
type MockMap_ContainsKey_Call[K comparable, V any] struct {
	*mock.Call
}

// ContainsKey is a helper method to define mock.On call
//   - key K
func (_e *MockMap_Expecter[K, V]) ContainsKey(key interface{}) *MockMap_ContainsKey_Call[K, V] {
	return &MockMap_ContainsKey_Call[K, V]{Call: _e.mock.On("ContainsKey", key)}
}

func (_c *MockMap_ContainsKey_Call[K, V]) Run(run func(key K)) *MockMap_ContainsKey_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMap_ContainsKey_Call[K, V]) Return(b bool) *MockMap_ContainsKey_Call[K, V] {
	_c.Call.Return(b)
	return _c
}

func (_c *MockMap_ContainsKey_Call[K, V]) RunAndReturn(run func(key K) bool) *MockMap_ContainsKey_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockMap
func (_mock *MockMap[K, V]) Get(key K) *V {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *V
	if returnFunc, ok := ret.Get(0).(func(K) *V); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*V)
		}
	}
	return r0
}

// MockMap_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockMap_Get_Call[K comparable, V any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key K
func (_e *MockMap_Expecter[K, V]) Get(key interface{}) *MockMap_Get_Call[K, V] {
	return &MockMap_Get_Call[K, V]{Call: _e.mock.On("Get", key)}
}

func (_c *MockMap_Get_Call[K, V]) Run(run func(key K)) *MockMap_Get_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMap_Get_Call[K, V]) Return(v *V) *MockMap_Get_Call[K, V] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockMap_Get_Call[K, V]) RunAndReturn(run func(key K) *V) *MockMap_Get_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// GetOrDefault provides a mock function for the type MockMap
func (_mock *MockMap[K, V]) GetOrDefault(key K, defaultValue *V) *V {
	ret := _mock.Called(key, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetOrDefault")
	}

	var r0 *V
	if returnFunc, ok := ret.Get(0).(func(K, *V) *V); ok {
		r0 = returnFunc(key, defaultValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*V)
		}
	}
	return r0
}

// MockMap_GetOrDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrDefault'
type MockMap_GetOrDefault_Call[K comparable, V any] struct {
	*mock.Call
}

// GetOrDefault is a helper method to define mock.On call
//   - key K
//   - defaultValue *V
func (_e *MockMap_Expecter[K, V]) GetOrDefault(key interface{}, defaultValue interface{}) *MockMap_GetOrDefault_Call[K, V] {
	return &MockMap_GetOrDefault_Call[K, V]{Call: _e.mock.On("GetOrDefault", key, defaultValue)}
}

func (_c *MockMap_GetOrDefault_Call[K, V]) Run(run func(key K, defaultValue *V)) *MockMap_GetOrDefault_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		var arg1 *V
		if args[1] != nil {
			arg1 = args[1].(*V)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMap_GetOrDefault_Call[K, V]) Return(v *V) *MockMap_GetOrDefault_Call[K, V] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockMap_GetOrDefault_Call[K, V]) RunAndReturn(run func(key K, defaultValue *V) *V) *MockMap_GetOrDefault_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// IsEmpty provides a mock function for the type MockMap
func (_mock *MockMap[K, V]) IsEmpty() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEmpty")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockMap_IsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmpty'
type MockMap_IsEmpty_Call[K comparable, V any] struct {
	*mock.Call
}

// IsEmpty is a helper method to define mock.On call
func (_e *MockMap_Expecter[K, V]) IsEmpty() *MockMap_IsEmpty_Call[K, V] {
	return &MockMap_IsEmpty_Call[K, V]{Call: _e.mock.On("IsEmpty")}
}

func (_c *MockMap_IsEmpty_Call[K, V]) Run(run func()) *MockMap_IsEmpty_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMap_IsEmpty_Call[K, V]) Return(b bool) *MockMap_IsEmpty_Call[K, V] {
	_c.Call.Return(b)
	return _c
}

func (_c *MockMap_IsEmpty_Call[K, V]) RunAndReturn(run func() bool) *MockMap_IsEmpty_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// KeySet provides a mock function for the type MockMap
func (_mock *MockMap[K, V]) KeySet() []K {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeySet")
	}

	var r0 []K
	if returnFunc, ok := ret.Get(0).(func() []K); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]K)
		}
	}
	return r0
}

// MockMap_KeySet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeySet'
type MockMap_KeySet_Call[K comparable, V any] struct {
	*mock.Call
}

// KeySet is a helper method to define mock.On call
func (_e *MockMap_Expecter[K, V]) KeySet() *MockMap_KeySet_Call[K, V] {
	return &MockMap_KeySet_Call[K, V]{Call: _e.mock.On("KeySet")}
}

func (_c *MockMap_KeySet_Call[K, V]) Run(run func()) *MockMap_KeySet_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMap_KeySet_Call[K, V]) Return(vs []K) *MockMap_KeySet_Call[K, V] {
	_c.Call.Return(vs)
	return _c
}

func (_c *MockMap_KeySet_Call[K, V]) RunAndReturn(run func() []K) *MockMap_KeySet_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockMap
func (_mock *MockMap[K, V]) Put(key K, value *V) {
	_mock.Called(key, value)
	return
}

// MockMap_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockMap_Put_Call[K comparable, V any] struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - key K
//   - value *V
func (_e *MockMap_Expecter[K, V]) Put(key interface{}, value interface{}) *MockMap_Put_Call[K, V] {
	return &MockMap_Put_Call[K, V]{Call: _e.mock.On("Put", key, value)}
}

func (_c *MockMap_Put_Call[K, V]) Run(run func(key K, value *V)) *MockMap_Put_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		var arg1 *V
		if args[1] != nil {
			arg1 = args[1].(*V)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMap_Put_Call[K, V]) Return() *MockMap_Put_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockMap_Put_Call[K, V]) RunAndReturn(run func(key K, value *V)) *MockMap_Put_Call[K, V] {
	_c.Run(run)
	return _c
}

// Remove provides a mock function for the type MockMap
func (_mock *MockMap[K, V]) Remove(key K) *V {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 *V
	if returnFunc, ok := ret.Get(0).(func(K) *V); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*V)
		}
	}
	return r0
}

// MockMap_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockMap_Remove_Call[K comparable, V any] struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - key K
func (_e *MockMap_Expecter[K, V]) Remove(key interface{}) *MockMap_Remove_Call[K, V] {
	return &MockMap_Remove_Call[K, V]{Call: _e.mock.On("Remove", key)}
}

func (_c *MockMap_Remove_Call[K, V]) Run(run func(key K)) *MockMap_Remove_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 K
		if args[0] != nil {
			arg0 = args[0].(K)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMap_Remove_Call[K, V]) Return(v *V) *MockMap_Remove_Call[K, V] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockMap_Remove_Call[K, V]) RunAndReturn(run func(key K) *V) *MockMap_Remove_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function for the type MockMap
func (_mock *MockMap[K, V]) Size() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockMap_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockMap_Size_Call[K comparable, V any] struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockMap_Expecter[K, V]) Size() *MockMap_Size_Call[K, V] {
	return &MockMap_Size_Call[K, V]{Call: _e.mock.On("Size")}
}

func (_c *MockMap_Size_Call[K, V]) Run(run func()) *MockMap_Size_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMap_Size_Call[K, V]) Return(n int) *MockMap_Size_Call[K, V] {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMap_Size_Call[K, V]) RunAndReturn(run func() int) *MockMap_Size_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Values provides a mock function for the type MockMap
func (_mock *MockMap[K, V]) Values() []*V {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Values")
	}

	var r0 []*V
	if returnFunc, ok := ret.Get(0).(func() []*V); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*V)
		}
	}
	return r0
}

// MockMap_Values_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Values'
type MockMap_Values_Call[K comparable, V any] struct {
	*mock.Call
}

// Values is a helper method to define mock.On call
func (_e *MockMap_Expecter[K, V]) Values() *MockMap_Values_Call[K, V] {
	return &MockMap_Values_Call[K, V]{Call: _e.mock.On("Values")}
}

func (_c *MockMap_Values_Call[K, V]) Run(run func()) *MockMap_Values_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMap_Values_Call[K, V]) Return(vs []*V) *MockMap_Values_Call[K, V] {
	_c.Call.Return(vs)
	return _c
}

func (_c *MockMap_Values_Call[K, V]) RunAndReturn(run func() []*V) *MockMap_Values_Call[K, V] {
	_c.Call.Return(run)
	return _c
}
