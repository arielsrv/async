// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package async

import (
	"context"

	"github.com/reugn/async"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFuture creates a new instance of MockFuture. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFuture[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFuture[T] {
	mock := &MockFuture[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFuture is an autogenerated mock type for the Future type
type MockFuture[T any] struct {
	mock.Mock
}

type MockFuture_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockFuture[T]) EXPECT() *MockFuture_Expecter[T] {
	return &MockFuture_Expecter[T]{mock: &_m.Mock}
}

// FlatMap provides a mock function for the type MockFuture
func (_mock *MockFuture[T]) FlatMap(fn func(T) (async.Future[T], error)) async.Future[T] {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for FlatMap")
	}

	var r0 async.Future[T]
	if returnFunc, ok := ret.Get(0).(func(func(T) (async.Future[T], error)) async.Future[T]); ok {
		r0 = returnFunc(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(async.Future[T])
		}
	}
	return r0
}

// MockFuture_FlatMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlatMap'
type MockFuture_FlatMap_Call[T any] struct {
	*mock.Call
}

// FlatMap is a helper method to define mock.On call
//   - fn func(T) (async.Future[T], error)
func (_e *MockFuture_Expecter[T]) FlatMap(fn interface{}) *MockFuture_FlatMap_Call[T] {
	return &MockFuture_FlatMap_Call[T]{Call: _e.mock.On("FlatMap", fn)}
}

func (_c *MockFuture_FlatMap_Call[T]) Run(run func(fn func(T) (async.Future[T], error))) *MockFuture_FlatMap_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func(T) (async.Future[T], error)
		if args[0] != nil {
			arg0 = args[0].(func(T) (async.Future[T], error))
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFuture_FlatMap_Call[T]) Return(future async.Future[T]) *MockFuture_FlatMap_Call[T] {
	_c.Call.Return(future)
	return _c
}

func (_c *MockFuture_FlatMap_Call[T]) RunAndReturn(run func(fn func(T) (async.Future[T], error)) async.Future[T]) *MockFuture_FlatMap_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockFuture
func (_mock *MockFuture[T]) Get(context1 context.Context) (T, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (T, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) T); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFuture_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockFuture_Get_Call[T any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockFuture_Expecter[T]) Get(context1 interface{}) *MockFuture_Get_Call[T] {
	return &MockFuture_Get_Call[T]{Call: _e.mock.On("Get", context1)}
}

func (_c *MockFuture_Get_Call[T]) Run(run func(context1 context.Context)) *MockFuture_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFuture_Get_Call[T]) Return(v T, err error) *MockFuture_Get_Call[T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockFuture_Get_Call[T]) RunAndReturn(run func(context1 context.Context) (T, error)) *MockFuture_Get_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function for the type MockFuture
func (_mock *MockFuture[T]) Join() (T, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (T, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFuture_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockFuture_Join_Call[T any] struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
func (_e *MockFuture_Expecter[T]) Join() *MockFuture_Join_Call[T] {
	return &MockFuture_Join_Call[T]{Call: _e.mock.On("Join")}
}

func (_c *MockFuture_Join_Call[T]) Run(run func()) *MockFuture_Join_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFuture_Join_Call[T]) Return(v T, err error) *MockFuture_Join_Call[T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockFuture_Join_Call[T]) RunAndReturn(run func() (T, error)) *MockFuture_Join_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Map provides a mock function for the type MockFuture
func (_mock *MockFuture[T]) Map(fn func(T) (T, error)) async.Future[T] {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Map")
	}

	var r0 async.Future[T]
	if returnFunc, ok := ret.Get(0).(func(func(T) (T, error)) async.Future[T]); ok {
		r0 = returnFunc(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(async.Future[T])
		}
	}
	return r0
}

// MockFuture_Map_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Map'
type MockFuture_Map_Call[T any] struct {
	*mock.Call
}

// Map is a helper method to define mock.On call
//   - fn func(T) (T, error)
func (_e *MockFuture_Expecter[T]) Map(fn interface{}) *MockFuture_Map_Call[T] {
	return &MockFuture_Map_Call[T]{Call: _e.mock.On("Map", fn)}
}

func (_c *MockFuture_Map_Call[T]) Run(run func(fn func(T) (T, error))) *MockFuture_Map_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func(T) (T, error)
		if args[0] != nil {
			arg0 = args[0].(func(T) (T, error))
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFuture_Map_Call[T]) Return(future async.Future[T]) *MockFuture_Map_Call[T] {
	_c.Call.Return(future)
	return _c
}

func (_c *MockFuture_Map_Call[T]) RunAndReturn(run func(fn func(T) (T, error)) async.Future[T]) *MockFuture_Map_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Recover provides a mock function for the type MockFuture
func (_mock *MockFuture[T]) Recover(fn func() (T, error)) async.Future[T] {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Recover")
	}

	var r0 async.Future[T]
	if returnFunc, ok := ret.Get(0).(func(func() (T, error)) async.Future[T]); ok {
		r0 = returnFunc(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(async.Future[T])
		}
	}
	return r0
}

// MockFuture_Recover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recover'
type MockFuture_Recover_Call[T any] struct {
	*mock.Call
}

// Recover is a helper method to define mock.On call
//   - fn func() (T, error)
func (_e *MockFuture_Expecter[T]) Recover(fn interface{}) *MockFuture_Recover_Call[T] {
	return &MockFuture_Recover_Call[T]{Call: _e.mock.On("Recover", fn)}
}

func (_c *MockFuture_Recover_Call[T]) Run(run func(fn func() (T, error))) *MockFuture_Recover_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func() (T, error)
		if args[0] != nil {
			arg0 = args[0].(func() (T, error))
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFuture_Recover_Call[T]) Return(future async.Future[T]) *MockFuture_Recover_Call[T] {
	_c.Call.Return(future)
	return _c
}

func (_c *MockFuture_Recover_Call[T]) RunAndReturn(run func(fn func() (T, error)) async.Future[T]) *MockFuture_Recover_Call[T] {
	_c.Call.Return(run)
	return _c
}

// RecoverWith provides a mock function for the type MockFuture
func (_mock *MockFuture[T]) RecoverWith(future async.Future[T]) async.Future[T] {
	ret := _mock.Called(future)

	if len(ret) == 0 {
		panic("no return value specified for RecoverWith")
	}

	var r0 async.Future[T]
	if returnFunc, ok := ret.Get(0).(func(async.Future[T]) async.Future[T]); ok {
		r0 = returnFunc(future)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(async.Future[T])
		}
	}
	return r0
}

// MockFuture_RecoverWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverWith'
type MockFuture_RecoverWith_Call[T any] struct {
	*mock.Call
}

// RecoverWith is a helper method to define mock.On call
//   - future async.Future[T]
func (_e *MockFuture_Expecter[T]) RecoverWith(future interface{}) *MockFuture_RecoverWith_Call[T] {
	return &MockFuture_RecoverWith_Call[T]{Call: _e.mock.On("RecoverWith", future)}
}

func (_c *MockFuture_RecoverWith_Call[T]) Run(run func(future async.Future[T])) *MockFuture_RecoverWith_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 async.Future[T]
		if args[0] != nil {
			arg0 = args[0].(async.Future[T])
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFuture_RecoverWith_Call[T]) Return(future1 async.Future[T]) *MockFuture_RecoverWith_Call[T] {
	_c.Call.Return(future1)
	return _c
}

func (_c *MockFuture_RecoverWith_Call[T]) RunAndReturn(run func(future async.Future[T]) async.Future[T]) *MockFuture_RecoverWith_Call[T] {
	_c.Call.Return(run)
	return _c
}

// complete provides a mock function for the type MockFuture
func (_mock *MockFuture[T]) complete(v T, err error) {
	_mock.Called(v, err)
	return
}

// MockFuture_complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'complete'
type MockFuture_complete_Call[T any] struct {
	*mock.Call
}

// complete is a helper method to define mock.On call
//   - v T
//   - err error
func (_e *MockFuture_Expecter[T]) complete(v interface{}, err interface{}) *MockFuture_complete_Call[T] {
	return &MockFuture_complete_Call[T]{Call: _e.mock.On("complete", v, err)}
}

func (_c *MockFuture_complete_Call[T]) Run(run func(v T, err error)) *MockFuture_complete_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 T
		if args[0] != nil {
			arg0 = args[0].(T)
		}
		var arg1 error
		if args[1] != nil {
			arg1 = args[1].(error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFuture_complete_Call[T]) Return() *MockFuture_complete_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockFuture_complete_Call[T]) RunAndReturn(run func(v T, err error)) *MockFuture_complete_Call[T] {
	_c.Run(run)
	return _c
}
