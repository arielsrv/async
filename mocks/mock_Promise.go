// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package async

import (
	"github.com/reugn/async"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPromise creates a new instance of MockPromise. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPromise[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPromise[T] {
	mock := &MockPromise[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPromise is an autogenerated mock type for the Promise type
type MockPromise[T any] struct {
	mock.Mock
}

type MockPromise_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockPromise[T]) EXPECT() *MockPromise_Expecter[T] {
	return &MockPromise_Expecter[T]{mock: &_m.Mock}
}

// Failure provides a mock function for the type MockPromise
func (_mock *MockPromise[T]) Failure(err error) {
	_mock.Called(err)
	return
}

// MockPromise_Failure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Failure'
type MockPromise_Failure_Call[T any] struct {
	*mock.Call
}

// Failure is a helper method to define mock.On call
//   - err error
func (_e *MockPromise_Expecter[T]) Failure(err interface{}) *MockPromise_Failure_Call[T] {
	return &MockPromise_Failure_Call[T]{Call: _e.mock.On("Failure", err)}
}

func (_c *MockPromise_Failure_Call[T]) Run(run func(err error)) *MockPromise_Failure_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 error
		if args[0] != nil {
			arg0 = args[0].(error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPromise_Failure_Call[T]) Return() *MockPromise_Failure_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockPromise_Failure_Call[T]) RunAndReturn(run func(err error)) *MockPromise_Failure_Call[T] {
	_c.Run(run)
	return _c
}

// Future provides a mock function for the type MockPromise
func (_mock *MockPromise[T]) Future() async.Future[T] {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Future")
	}

	var r0 async.Future[T]
	if returnFunc, ok := ret.Get(0).(func() async.Future[T]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(async.Future[T])
		}
	}
	return r0
}

// MockPromise_Future_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Future'
type MockPromise_Future_Call[T any] struct {
	*mock.Call
}

// Future is a helper method to define mock.On call
func (_e *MockPromise_Expecter[T]) Future() *MockPromise_Future_Call[T] {
	return &MockPromise_Future_Call[T]{Call: _e.mock.On("Future")}
}

func (_c *MockPromise_Future_Call[T]) Run(run func()) *MockPromise_Future_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPromise_Future_Call[T]) Return(future async.Future[T]) *MockPromise_Future_Call[T] {
	_c.Call.Return(future)
	return _c
}

func (_c *MockPromise_Future_Call[T]) RunAndReturn(run func() async.Future[T]) *MockPromise_Future_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Success provides a mock function for the type MockPromise
func (_mock *MockPromise[T]) Success(v T) {
	_mock.Called(v)
	return
}

// MockPromise_Success_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Success'
type MockPromise_Success_Call[T any] struct {
	*mock.Call
}

// Success is a helper method to define mock.On call
//   - v T
func (_e *MockPromise_Expecter[T]) Success(v interface{}) *MockPromise_Success_Call[T] {
	return &MockPromise_Success_Call[T]{Call: _e.mock.On("Success", v)}
}

func (_c *MockPromise_Success_Call[T]) Run(run func(v T)) *MockPromise_Success_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 T
		if args[0] != nil {
			arg0 = args[0].(T)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPromise_Success_Call[T]) Return() *MockPromise_Success_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockPromise_Success_Call[T]) RunAndReturn(run func(v T)) *MockPromise_Success_Call[T] {
	_c.Run(run)
	return _c
}
